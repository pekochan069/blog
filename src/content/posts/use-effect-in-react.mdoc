---
title: Effect를 react에서 사용하기
description: 'Effect가 무엇인지 알아보고, react에서 어떻게 사용할 수 있는지 알아보자.'
category: Effect
tags: ["프로그래밍", "react", "Effect", "typescript"]
published: 2025-05-09T06:34:06.353Z
draft: true
---

## Effect

이 글의 주제는 [Effect](https://effect.website/)인데, Effect를 모르는 사람들이 많이 존재하기에, 글의 주제에 들어가기에 앞서 빠르게 Effect에 대해 설명을 하고 넘어가 보겠습니다.

### Effect란?

**Effect**는 동기, 비동기 코드를 작성할 때 발생할 수 있는 오류와 사이드 이펙트, 의존성 등을 관리하기 위한 강력한 도구들을 제공하는 프레임워크입니다. 여기서 프레임워크라고 언급한 이유는 Effect는 콘솔, 입출력, Http API, 자료구조 등 프로그램을 만들기 위한 다양한 라이브러리들의 집합이기 때문입니다. Effect는 `Scala`의 [ZIO](https://zio.dev/)를 타입스크립트에 가져오기 위해 프로젝트가 시작되었으며, 이후 `fp-ts`와 합쳐져 현재까지 활발하게 개발되고 있습니다.

Effect의 가장 중요한 기능은 `Effect` 타입입니다. Effect의 시작은 `Effect`에서 시작해 `Effect`로 끝납니다. `Effect`는 다음과 같은 타입 시그니쳐를 가지고 있습니다.

```ts
Effect<Success, Error, Requirements>
```

`Success`는 `Effect`가 성공적으로 평가되었을 때 반환할 타입을, `Error`는 오류 타입을, `Requirements`는 해당 `Effect`가 평가되어야 할 때 필요한 의존성을 나타냅니다.

`Effect`의 가장 큰 특징 중 하나는 `ZIO`와 마찬가지로 동기 API와 비동기 API를 하나의 `Effect`로 합친 것입니다. 다만 `Effect`를 평가할 때는 다른 함수를 사용해야 합니다. 
동기 `Effect`를 평가하기 위한 함수는 `runSync`이며, 비동기 `Effect`를 평가하기 위한 함수인 `runPromise`는 비공기 함수로 `Promise`를 반환합니다.

```ts
Effect.runSync(effect) // 동기 Effect 평가
Effect.runPromise(effect) // 비동기 Effect 평가
```

Effect의 큰 장점 중 하나는 `Effect`의 합성이 굉장히 쉽고 강력하다는 것입니다. 모든 `Effect` 객체들은 `pipe`라는 합성을 하기 위한 메소드를 가지고 있고, 동일한 기능을 수행하는 `Effect.pipe` 함수도 존재합니다.

```ts
const effect = Effect.succeed(1)
  .pipe(
    Effect.map((n) => n + 1),
    Effect.map((n) => n > 1)
  );
```

`pipe`와 함께 자주 자주 사용되는 기능은 `Effect.gen`입니다. `Effect.gen`은 제너레이터를 이용해 `Effect`를 평가해 쉽게 effectful한 코드를 작성할 수 있게 해주는 도구입니다. `Effect.gen`은 `pipe`와 다르게 일반 타입스크립트 제너레이터를 사용하므로 평범한 루프 및 분기 처리 등을 사용할 수 있습니다.

```ts
const effect = Effect.succeed(1)
const effect2 = Effect.succeed(2)
const failedEffect = Effect.fail(3)

const gen = Effect.gen(function*() {
  const n1 = yield* effect; // 1
  const n2 = yield* effect2; // 2
  const n3 = yield* failedEffect; // 오류, 즉시 종료

  for (let i = 0; i < 10; ++i) {
    const n = yield* effect;
    console.log(n);
  }

  return n1 + n2 + n3;
})
```

위의 코드에서 `yield* failedEffect`는 실패하는 `Effect`를 평가하는 것을 알 수 있습니다. 이 때 `Effect.gen`은 실패하는 즉시 `Error`을 반환하는 short circuit 동작을 합니다.

더 자세한 내용은 [Effect Docs](https://effect.website/docs)에서 확인하면 됩니다.

### 왜 Effect를 사용해야 할까?

Effect에 대해 간단히 알아봤는데, 그렇다면 왜 Effect를 사용하는걸까요? 이는 [Why Effect?](https://effect.website/docs/getting-started/why-effect/)에 잘 나와있습니다.

간단히 설명하자면 기존의 타입스크립트 코드는 오류가 발생할 지점을 알 수 없지만, Effect에서는 타입 레벨에서 관리가 가능하다는 것이 주요한 이유입니다.

```ts
function mayFailParse<T>(jsonBlob: string): T {
    return JSON.parse(jsonBlob) as T;
}
```

위의 `mayFailParse` 함수는 json으로 직렬화가 가능한 문자열을 입력으로 받아 `T` 타입의 값을 반환할 수 있는 함수입니다. 이 함수에는 몇 가지 큰 문제점이 존재합니다.

우선 가장 먼저 해결해야 하는 문제는 `JSON.parse`는 오류가 발생할 수 있는 함수라는 것입니다. `JSON.parse`는 json으로 직렬화가 불가능한 입력값을 받을 경우 오류를 발생시키기 때문에, 코드를 `try catch`로 묶어 오류를 해결해야 합니다.

```ts
function mayFailParse<T>(jsonBlob: string): T | null {
  try {
    return JSON.parse(jsonBlob) as T;
  } catch (e) {
    return null;
  }
}
```

오류가 발생하지 않도록 처리했다는 점에서 첫 번째보다 나아졌습니다. 그런데 이 함수는 오류가 발생한다면 `null`을 반환하도록 했는데, 코드에서 다양한 오류가 발생할 수 있다면 호출자에게 어떠한 오류가 발생했는지 알려줘야 할 수도 있습니다. 이를 처리하기 위해 다음과 같은 에러 태그를 반환할 수 있습니다.

```ts
class JSONParseError {
  constructor(public tag: string) {}
}

function mayFailParse<T>(jsonBlob: string): T | JSONParseError {
  try {
    return JSON.parse(jsonBlob) as T;
  } catch (e) {
    if (e instanceof SyntaxError) {
      return new JSONParseError("SyntaxError");
    }
    if (e instanceof TypeError) {
      return new JSONParseError("TypeError");
    }
    return new JSONParseError("UnknownError");
  }
}
```

이제 `mayFailParse`는 어떤 오류가 발생할 수 있는지 호출자에게 알릴 수 있습니다. 그런데 만약 여기에 `mayFailParse`와 같이 오류가 발생할 수 있는 변환 함수를 추가하려고 한다면 어떻게 될까요?

```ts
class JSONParseError {
  constructor(public tag: string) {}
}

class TransformError {}

function mayFailParse<T, U>(
  jsonBlob: string,
): U | JSONParseError | TransformError {
  try {
    const json = JSON.parse(jsonBlob) as T;

    try {
      return transform(json);
    } catch (e) {
      return new TransformError();
    }
  } catch (e) {
    if (e instanceof SyntaxError) {
      return new JSONParseError("SyntaxError");
    } else if (e instanceof TypeError) {
      return new JSONParseError("TypeError");
    }
    return new JSONParseError("UnknownError");
  }
}
```

`transform`에서 오류가 발생할 수 있기 때문에 `TransformError`를 추가하고, 반환 타입에도 `TransformError`를 명시해줘야 합니다. `JSONParseError`와 `TransformError`를 하나의 `Error` 클래스로 합쳐 하나의 `Error` 타입을 반환할 수도 있지만, 그걸 제외하더라고 중첩되는 `try catch`문, 복잡한 호출자측 오류 회복 등 다양한 문제가 존재합니다.

```ts
class JSONParseError {
  constructor(public tag: string) {}
}

class TransformError {}

function mayFailParse<T, U>(
  jsonBlob: string,
): U | JSONParseError | TransformError {
  try {
    const json = JSON.parse(jsonBlob) as T;

    return transform(json);
  } catch (e) {
    if (e instanceof SyntaxError) {
      return new JSONParseError("SyntaxError");
    } else if (e instanceof TypeError) {
      return new JSONParseError("TypeError");
    } else if (e instanceof SomeTransformError) {
      return new TransformError("Some Transform Error") 
    }
    return new JSONParseError("UnknownError");
  }
}
```

중첩되는 `try catch`문을 해결하기 위해 `try catch`문을 하나로 처리할 수도 있습니다. 이러면 위에서와같이 일명 아도겐 코드라고 불리는 무한 들여쓰기 문제를 해결할 수 있습니다. 하지만 이 방식에는 큰 문제가 있는데, 실제로 오류가 발생하는 지점과 오류를 처리하는 지점의 괴리가 발생한다는 점입니다. 일반적으로 코드를 볼 때 그 주변에 있는 코드의 문맥을 이용해 코드를 이해를 하는데, 이렇게 오류와 오류 처리 부분이 떨어지게 되면 실제로 어디서 오류가 발생하는지 봤을 때 모호해지는 문제가 발생합니다.

Effect는 이러한 문제를 해결할 수 있는 길을 제시합니다.

```ts
class JSONParseError {
  constructor(public tag: string) {}
}

class TransformError {}

// Effect<T, JSONParseError>
function parse<T>(jsonBlog: string) {
  return Effect.try({
    try: () => JSON.parse(jsonBlog) as T,
    catch: (e) => {
      if (e instanceof SyntaxError) {
        return new JSONParseError("SyntaxError");
      }
      if (e instanceof TypeError) {
        return new JSONParseError("TypeError");
      }
      return new JSONParseError("UnknownError");
    }
  })
}

// Effect<U, TransformError>
function transform<T, U>(parsed: T): U {
  return Effect.try({
    try: () => transformParsed(parsed),
    catch: (e) => new TransformError(),
  )
}

// Effect<U, ParseError | TransformError>
function mayFailParse<T, U>(jsonBlob: string) {
  return Effect.gen(function* () {
    const parsed = yield* parse<T>(jsonBlob);
    const transformed = yield* transform<T, U>(parsed);

    return transformed;
  })
}
```

Effect의 아름다운 점은 함수를 정의하고 나면 타입 추론으로 자동으로 반환값과 발생할 수 있는 오류를 타입으로 알 수 있다는 점입니다. 위의 `mayFailParse`의 경우 `Effect<U, ParseError | TransformError>` 타입의 값을 반환합니다. 이 `Effect`는 `Effect.runSync`로 실행해 값을 가져올 수 있습니다. 이 모든 과정은 타입 안전한 코드를 작성할 수 있게 합니다. 이전의 `try catch`를 사용한 코드에서는 실수를 하면 필요한 타입 정보를 얻지 못할 수도 있고, 실수를 저지르기도 굉장히 쉽습니다. Effect는 일정한 코드의 스타일을 지키기만 한다면 자동으로 안전한 코드를 얻을 수 있습니다. 이것이 바로 Effect를 사용해야 하는 이유라고 생각합니다.

## Effect를 React에서 사용하기

Effect에 대해 간략히 알아봤으므로, 이제 본 주제인 **react**에서 **Effect**를 사용해보도록 하겠습니다. 

### Effect로 안전하게 백엔드 호출하기

웹 프로젝트에서 백엔드를 호출해 정보를 받아오는 일은 가장 많이 하는 작업입니다. 백엔드를 호출하는 방법은 여러가지 방법이 있고, 각 프레임워크마다 여러 도구들을 제공하고 있습니다. 예제 프로젝트는 [TanStack Start](https://tanstack.com/start/latest)의 `Server Function` RPC 기능을 이용해 진행해보겠습니다.

프로젝트는 할 일 목록을 가져오는 간단한 Todo List 앱으로, [effect-react](https://github.com/pekochan069/effect-react) 에서 확인할 수 있습니다.

우선 가장 기본적인 구현입니다. `Tanstack Start`의 `Server Function`은 [createServerFn](https://tanstack.com/start/latest/docs/framework/react/server-functions#defining-server-functions)과 [useServerFn]() 함수를 이용해 사용할 수 있습니다.

```ts
// server.ts
...
export const getTodos = createServerFn().handler(
  async () => await db.select().from(todos)
)
...
```

할 일 목록을 가져오는 클라이언트 코드는 다음과 같이 작성할 수 있습니다.

```tsx
// TodosContext.tsx
export function TodosProvider({ children }: { children: ReactNode }) {
  const $getTodos = useServerFn(getTodos);
  const [todos, setTodos] = useState<Todo[]>([]);

  ...

  useEffect(() => {
    $getTodos().then((res) => {
      setTodos(res);
    })
  }, []);

  return (
    <TodosContext.Provider value={{ todos }}>
      {children}
    </TodosContext.Provider>
  )
}
```

현재의 구현에는 몇 가지 문제가 존재합니다.

1. 데이터베이스는 실패할 수 있다.

이 프로젝트의 데이터베이스는 간단하게 로컬 `sqlite` 파일을 `drizzle-orm`을 이용해 연결해 사용을 하고 있습니다. 이 경우에 데이터베이스는 File I/O 오류를 일으킬 수 있습니다. 데이터베이스가 별도의 서버, 혹은 외부의 서버리스 데이터베이스에서 연결을 할 수도 있습니다. 이 경우 데이터베이스에 연결을 할 때 네트워크 오류가 일어날 가능성이 있습니다. 이를 해결하기 위해선 데이터베이스 부분을 `try catch` 문으로 감싸야 합니다.

```ts
export const getTodos = createServerFn().handler(
  async () => {
    try {
      return await db.select().from(todos);
    } catch (e) {
      console.error(e);
      return [];
    }
  }
)
```

이 함수는 간단하지만, 스키마 검증이나 사용자 인증, JSON 역직렬화 등의 작업을 필요로 할 경우 위에서 설명한대로 훨씬 더 많은 `try catch`문이 필요하거나 오류와 동떨어진 위치에서 오류를 처리하게 됩니다.

2. 네트워크는 실패할 수 있다

클라이언트 코드에서 할 일 목록을 불러오는 코드도 데이터베이스와 마찬가지로 네트워크 오류가 발생할 수 있습니다. 이를 해결하기 위해 클라이언트에서도 `try catch`문이 필요합니다.

```tsx
// TodosContext.tsx
export function TodosProvider({ children }: { children: ReactNode }) {
  const $getTodos = useServerFn(getTodos);
  const [todos, setTodos] = useState<Todo[]>([]);
  const [error, setError] = useState<Error | null>(null);

  ...

  useEffect(() => {
    try {
      $getTodos().then((res) => {
        setTodos(res);
      })
    } catch (e) {
      console.error(e);
      setError(e);
    }
  }, []);

  return (
    <TodosContext.Provider value={{ todos, error }}>
      {children}
    </TodosContext.Provider>
  )
}
```

#### Effect로 오류 처리하기

```ts
class DBError extends Data.TaggedError("DBError")<{
  message?: string,
  cause?: unknown,
}> {}

const getTodosEffect = Effect.tryPromise({
  try: () => db.select.from(todos),
  catch: (e) => new DBError({ message: "Database Error", cause: e }),
});

...

const getTodos = createServerFn().handler(
  async () =>
    await Effect.runPromise(
      getTodosEffect.pipe(
        Effect.catchTag("DBError", () => Effect.succeed([] as Todo[])),
      ),
    ),
);
```

위에서 본 코드와는 꽤 많은 부분이 달라졌다. 하나하나씩 살펴보자

1. `DBError`로 일어날 수 있는 오류 명시

자바스크립트, 타입스크립트의 가장 큰 문제점 중 하나는 발생할 수 있는 오류를 함수 시그니처에 담기가 까다롭다는 점입니다. 하지만 Effect는 어떤 오류가 일어날지 태그를 이용해 쉽게 판별할 수 있는 시스템을 제공하고 있습니다.

우선 Effect는 오류가 발생했을 때 반환된 오류의 `_tag`를 검사해 어떤 오류 유형인지 판별할 수 있습니다. `TaggedError`는 이를 편하게 사용할 수 있도록 Effect에서 제공하는 자료형 중 하나입니다. 비슷하게 `Error`의 파생 클래스가 아닌 `TaggedClass`도 존재합니다. 이 오류는 `Effect.try`와 `Effect.tryPromise`에서 사용하면 됩니다. `Effect.tryPromise`문을 더 자세히 보자.

```ts
Effect.tryPromise({
  try: () => db.select.from(todos),
  catch: (e) => new DBError({ message: "Database Error", cause: e }),
});
```

우선 `Effect.tryPromise`는 두 가지 방식으로 사용 가능한데, 첫 번째는 위와 같이 시도할 코드를 `try`, 오류가 일어날 시 수행할 코드를 `catch`에 넣어 사용하는 것입니다. 이는 함수에서 어떤 오류가 발생할 지 명시적으로 표기할 때 사용합니다. 두 번째 방식은 다음과 같이 콜백만 넣어주는 형태입니다.

```ts
Effect.tryPromise(() => db.select.from(todos));
```

이 형태는 어떤 오류가 발생할 지 모를 경우, 혹은 어떤 오류가 발생하던 동일한 오류처리 루틴을 가질 경우 사용하면 됩니다. 이 프로젝트에서는 오류가 명백하기 때문에 전자의 방식을 사용했습니다.

마지막으로 실제로 수행하는 부분인 `getTodos`에서는 `Effect.runPromise`를 이용해 수행을 합니다. 함수를 평가하기 전에 오류를 처리하기 위해 실행할 `Effect`에 `pipe`를 이용해 오류처리문을 넣었습니다. 클라이언트에서 오류가 발생할 시 추가적인 정보를 보여주려고 한다면 다른 오류 처리용 값을 반환할 수도 있지만, 이 프로젝트에서는 간단하게 빈 배열을 반환하는 것으로 처리를 했습니다. 이는 프로젝트에서 필요로 하는 내용에 따라 적절히 조절을 하면 됩니다.

클라이언트에서의 코드 또한 동일한 방식으로 처리를 하면 됩니다. 그러면 서버와 클라이언트 모두 안전한 코드를 실행할 수 있게 됩니다.

### Effect 런타임



### ManagedRuntime


### Effect의 Cache 사용하기

Effect는 거대한 프레임워크로 다양한 기능들을 지원하고 있는데, 그 중 하나가 캐싱입니다. 보통 리액트 앱에서의 캐싱은 [TanStack Query](https://tanstack.com/query/latest)를 많이 사용하는데, Effect를 이용한다면 그에 못지않는, 혹은 더욱 강력한 캐싱 시스템을 만들 수 있습니다.

### 서비스 및 의존성 주입