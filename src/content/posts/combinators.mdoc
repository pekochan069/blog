---
title: Combinators
description: Lambda Calculus의 Combinators
category: Lambda Calculus
tags: ["프로그래밍", "Lambda Calculus", "함수형 프로그래밍", "Combinators"]
published: 2025-01-31T07:48:17.305Z
draft: false
---

## Combinator란 무엇일까?

Combinator는 간단히 말하면 자유 변수를 사용하지 않고 종속 변수들만을 사용하는 함수들의 집합이라고 할 수 있습니다. 자유 변수란 함수의 매개변수가 아닌 외부에서 정의된 변수를 의미하고, 종속 변수란 함수의 매개변수로 정의된 변수를 의미합니다.

즉 Combinator는 함수의 인자에 대해서만 연산을 하는 함수들을 뜻합니다.

예를 들어보자면 다음과 같은 함수들은 Combinator로 보지 않습니다.

```ts
function notCombinator(a: number): number {
    return a + 1;
}

function notCombinator2(f: Function): Function {
    const res = getValue();

    return f(res);
}
```

첫 번째 함수는 1이라는 상수를 사용하고 있는데, 상수 또한 함수의 매개변수가 아니기 때문에 Combinator로 볼 수 없습니다. 두 번째 함수는 외부에서 정의된 함수 `getValue`를 사용하고 있으므로 Combinator로 볼 수 없습니다.

반대로 다음과 같은 함수들은 Combinator입니다.

```ts
function combinator(a: number): number {
    return a;
}

function combinator2(f: function, g: function): function {
    return f(g);
}
```

두 함수 모두 함수의 매개변수에 대해서만 연산을 수행하고 있기 때문에 Combinator입니다.

Combinator들은 Lambda Calculus로 나타낼 수 있으며, 이 글에서도 Lambda Calculus를 사용하여 Combinator를 설명합니다. 그래서 이 글의 내용을 이해하기 위해서는 Lambda Calculus에 대한 이해가 필요합니다.

### Lambda Calculus

Combinator는 Lambda Calculus에 근간을 둔 개념입니다. Lambda Calculus는 다른 글에서 다룰 예정이라 여기서는 자세한 설명 대신 간단하게 훑어볼 것입니다.

우선 Lambda Calculus의 핵심은 당연히 람다입니다. 여기서 말하는 람다는 람다 표현식, 혹은 람다 함수를 의미합니다. 람다 함수는 다음과 같은 형태를 가집니다.

```math
\lambda xy.yz
```

여기서 {%math m="\\lambda"/%}는 함수를 선언하는 키워드입니다. {%math m="xy"/%}는 함수의 매개변수, {%math m="yz"/%}는 함수의 정의 부분입니다. {%math m="x"/%}와 {%math m="y"/%}는 함수의 매개변수이므로 함수에 종속된 종속 변수입니다. 반대로 함수의 정의에 있는 {%math m="z"/%}는 함수의 매개변수가 아니므로 자유 변수입니다.

함수에 인자를 넣어서 함수를 호출할 때는 다음과 같이 작성합니다.

```math
(\lambda xy.yz) ab
```

함수의 평가는 치환을 통해 이루어집니다. 함수의 치환은 다음과 같은 과정을 통해 이루어집니다.

1. 사용된 기호들에 중복된 이름이 있는지 확입합니다. 중복된 이름이 있다면 새로운 기호로 바꿉니다. 이 과정은 {%math m="\\alpha\\ conversion"/%} 이라고 부릅니다.
2. 함수의 정의에 있는 매개변수를 함수 호출 시에 넣은 인자로 치환합니다. 이 과정은 {%math m="\\beta\\ reduction"/%} 이라고 부릅니다.
3. 더 이상 치환할 것이 없을 때까지 1, 2 과정을 반복합니다.

위의 예시를 평가해보면 다음과 같은 결과가 나옵니다.

```math
(\lambda xy.yz) ab = (\lambda y.yz) b = bz
```

한 가지 더 예시를 보겠습니다.

```math
(\lambda xy.yx) ab = (\lambda y.ya) b = ba
```

Lambda Calculus는 굉장히 강력한 수학적 도구입니다. Lambda Calculus는 튜링 머신과 동치이며, 그로 인해 Lambda Calculus 만으로도 어떠한 계산이든 할 수 있습니다. 현실에서는 함수의 평가는 오버헤드가 발생하며, 다양한 수학적 기호들을 Lambda Calculus로 정의하면 굉장히 복잡한 함수식들을 필요로 하기 때문에 Lambda Calculus를 직접 사용하기보다는 Lambda Calculus의 개념들을 차용하여 사용합니다.

### 어째서 Combinator를 사용하는가?

Combinator는 프로그래밍을 할 때 굉장히 강력한 도구 중 하나입니다. 어떤 문제에 대해 접근할 때 나이브하게 명령형 프로그래밍을 통해 접근하는 것은 대부분의 프로그래머들에게 친숙한 방법입니다. 어떤 것을 반복적으로 수행할 때는 `for`루프를 사용하고, `if`문을 사용해 조건에 따라 다른 동작을 하도록 하는 것은 굉장히 자연스러운 방법입니다. 

하지만 이러한 접근법에는 문제점들이 존재합니다. 첫번째로는 실수가 발생하기 쉽다는 문제가 있습니다. 분기를 제대로 처리하지 않거나, 반복 조건을 잘못 설정하거나, 혹은 변수의 값을 잘못 변경하는 일도 허다하게 발생합니다. 두  번째는 코드의 길이가 굉장히 길어질 수 있다는 점입니다. 코드의 길이는 가독성과 버그의 발생 빈도에 큰 영향을 끼치는 요소로 널리 알려져 있습니다. 특히 분기문을 많이 사용하게 되면 일명 아도겐 코드라고 불리는 상당한 양의 들여쓰기가 발생하게 됩니다. 코드의 재사용성이 떨어진다는 문제 또한 존재합니다. 명령형 프로그래밍으로 작성된 코드는 일반적으로 해당 블럭의 코드에 종속되며 다른 종류의 문제에 재사용하기 어렵거나 불가능에 가까운 경우가 많습니다.

이러한 문제들을 해결하기 위해 다양한 프로그래밍 방법론들이 등장했습니다. 대표적으로는 객체 지향 프로그래밍과 함수형 프로그래밍이 있죠. 여기서는 객체 지향 프로그래밍을 다루지 않으므로 패스를 하고, 함수형 프로그래밍의 핵심 개념은 함수들을 합성하는 것입니다. 각각 하나의 작은 일만 하는 다양한 함수들을 정의하고, 그 함수들을 합성시켜 많은 작업을 수행하는 새로운 함수를 만들어내는 것이 함수형 프로그래밍의 핵심입니다. 이러한 방식은 각각의 함수들이 작은 일들만 수행하기 때문에 다양한 곳에 사용이 가능해져 코드의 높은 재사용성을 확보하고, 싷제 핵심 로직에서는 다양한 함수들을 순차적으로 적용시키는 것만으로도 복잡한 작업을 할 수 있게 되어서 코드의 상당히 간결하면서도 짧은 코드를 작성해 버그의 발생 빈도도 낮출 수 있습니다.

Combinator는 이런 함수형 프로그래밍에서 자주 나타나는 패턴들을 정형화해 놓은 일종의 디자인 패턴으로도 볼 수 있습니다. 디자인 패턴의 장점은 다양한 문제에 대해 일반적인 가이드라인을 제시하고, 해당 패턴이 어떤 방식으로 동작하는지 알고 있다면 코드를 이해하기 쉬워집니다.

## Combinators

### 하스켈 커리의 Combinatory Logic

### To Mock a Mockingbird

## 다양한 Combinator들

Lambda Calculus는 튜링 머신과 동치라고 위에서 언급했는데, 자유 변수를 사용하지 않는 Combinator들도 특정 Combinator들을 조합해 튜링 완전한 시스템을 만들 수 있습니다. 이러한 Combinator들의 조합 중 가장 유명한 것은 SKI Combinator 입니다. 이름에서 알 수 있듯이 S, K, I 세 가지 Combinator들을 조합해 다른 Combinator들을 정의할 수 있고, 충분히 많은 SKI Combinator들을 조합해 어떠한 계산도 할 수 있습니다.

SKI와 더불어 BCKW라는 Combinator의 조합으로도 같은 효과를 얻을 수 있습니다. SKI와 BCKW 시스템은 서로 교환이 가능합니다. 즉 SKI Combinator의 조합은 BCKW Combinator들의 조합으로 동일한 계산을 할 수 있음을 뜻합니다.

이 글에서는 SKI Combinator들을 살펴볼 겁니다. SKI Combinator들을 먼저 정의하고, 다른 Combinator들을 유도해보겠습니다

### SKI Combinators

#### I Combinator

I Combinator는 가장 간단한 Combinator 중 하나입니다. I Combinator는 인자로 주어진 값을 그대로 돌려주는 함수입니다. 함수식은 다음과 같습니다.

```math
I = \lambda a.a
```

실제 코드로 구현하면 다음과 같이 구현할 수 있습니다.

```ts
// i.ts
const i = <A>(a: A) => a;
```

```cpp
// i.cpp
auto i = [](auto a) { return a; };
```

I Combinator는 언뜻 보면 굉장히 불필요한 함수처럼 보일 수 있지만 생각보다 다양한 방법으로 활용할 수 있는 Combinator입니다. 이는 다른 Combinator들을 사용할 때 명확해집니다.

#### S Combinator

S Combinator의 정의는 다음과 같습니다.

```math
S = \lambda abc.ac(bc)
```

위 식을 좀 더 자세히 살펴보곘습니다. 우선 식을 보면 {%math m="a"/%}, {%math m="b"/%}, {%math m="c"/%} 3개의 매개변수를 받는 함수입니다. 함수의 정의는 {%math m="ac(bc)"/%} 인데, 이걸 우리가 잘 아는 형태로 바꾸면 {%math m="a(c, b(c))"/%}라고 적을 수 있습니다. 즉 S Combinator는 인자를 두 개를 받는 이진 함수 {%math m="a"/%}, 인자를 하나를 받는 단항 함수 {%math m="b"/%}, 그리고 어떠한 값이든 상관 없는 {%math m="c"/%}를 인자로 받는 함수입니다. 이 함수를 코드를 통해 정의하면 다음과 같이 정의할 수 있습니다.

먼저 타입스크립트 코드입니다.

```ts
// s.ts
type S = <A, B, C>(a: (c: C, b: B) => A, b: (c: C) => B, c: C) => A
const s: S = (a, b, c) => a(c, b(c));
```

위에서 설명한 대로 2항 함수 {%math m="a"/%}, 1항 함수 {%math m="b"/%}, 그리고 어떤 타입이든 상관 없는 값 {%math m="c"/%}를 받아서 {%math m="a(c, b(c))"/%}를 반환하는 함수입니다.

위 함수의 사용 예시를 간단하게 살펴보겠습니다. 

우선 어떤 값들이 담긴 배열 {%math m="arr"/%}가 있다도 가정해봅시다. 이 배열괴 이 배열의 역 배열인 {%math m="arr\\_reverse"/%}이 서로 같은지 알아보고 싶다고 한다면, S Combinator를 활용해 다음과 같이 코드를 작성할 수 있습니다.

```ts
const isEqualArray = <T>(a: T[], b: T[]) => {
  if (a.length !== b.length) return false;
  return a.every((v, i) => v === b[i]);
};
const reverse = <T>(arr: T[]) => arr.toReversed();
const isPalindrome = <T>(arr: T[]) => s(isEqualArray<T>, reverse, arr);

const arr = [1, 2, 3, 2, 1];
console.log(isPalindrome(arr)); // true
const notPalindrome = [1, 2, 3, 4, 5];
console.log(isPalindrome(notPalindrome)); // false
```

위의 S Combinator 부분을 풀어서 보면 다음과 같습니다.

```ts
s(isEqualArray<T>, reverse, arr) = isEqualArray(arr, reverse(arr))
```

함수형 프로그래밍 언어들에서는 일반적으로 함수가 커리된 형태로 정의되어 있는데, 이런 형태가 Lambda Calculus의 실제 평가 순서와 동일하기 때문에 Combinator들을 커리된 형태로 정의할 수도 있습니다.

```ts
// s-curried.ts
type S = <A, B, C>(a: (c: C, b: B) => A) => (b: (c: C) => B) => (c: C) => A
const s: S = a => b => c => a(c, b(c));
```

커리된 함수는 기본적으로 클로저이며, 이를 통해 함수의 인자를 부분적으로 적용한 후 저장해 다양한 환경에 재사용할 수 있습니다.

c++로 구현한 코드는 다음과 같습니다.

```cpp
// s.cpp
auto s = [](auto a, auto b, auto c) {
    return a(c, b(c));
};
```

마찬가지로 c++에서도 커리된 S Combinator를 만들 수 있습니다.

```cpp
// s_curried.cpp
auto s = [](auto a) {
  return [a](auto b) {
    return [a, b](auto c) {
      return a(c, b(c));
    };
  };
};
```

#### K Combinator

다음은 K Combinator입니다. K Combinator는 두 개의 인자를 받는 2항 함수이며, 두 번째 인자를 무시하는 함수이기 때문에 하스켈 커리는 Cancellation 함수라고 불렀습니다. 함수의 정의는 다음과 같습니다.

```math
K = \lambda ab.a
```

코드로도 정의해 보겠습니다.

```ts
// k.ts
type K = <A, B>(a: A, b: B) => A;
const k: K = (a, b) => a;
```

```ts
// k-curried.ts
type K = <A, B>(a: A) => (b: B) => A;
const k: K = a => b => a;
```

```cpp
// k.cpp
auto k = [](auto a, auto b) { return a; };
```

```cpp
// k_curried.cpp
auto k = [](auto a) {
  return [a](auto b) {
    return a;
  };
};
```

K Combinator 또한 겉보기에는 그다지 유용해 보이지 않습니다. 하지만 {%math m="b"/%}를 완전히 무시한다는 특징을 잘 살린다면 특정 상황에서 굉장히 유용하게 사용할 수 있습니다.

예를 들면 다음과 같은 데이터를 처리하는 함수들의 채인이 있다고 가정해 봅시다.

```ts
function process(data: Data): Processed {
  return data
    |> func1
    |> func2
    |> func3
    |> func4;
}

// 파이프 문법은 아직 ECMAScript 표준이 아니기 때문에 이 코드를 실제로 실행할 수는 없습니다.
// 하스켈이나 f#, ocaml, rust와 같이 파이프 연산자를 지원하는 언어에서는
// 이러한 코드를 실행할 수 있습니다.
```


이 코드에서 `func2`가 수행됐을 때 어떤 값이 출력되는지 알고 싶다고 한다면, 일반적으로는 `func2`의 반환값을 어떤 변수에 저장하고 그 값을 출력한 후 다시 원래의 코드로 복구해야 합니다.

```ts
function process(data: Data): Processed {
  const intermediate = data |> func1 |> func2;

  console.log(intermediate);

  return intermediate |> func3 |> func4;
}
```

하지만 K Combinator를 사용하면 이 채인을 깨지 않고 원하는 작업을 수행하는 것이 가능합니다. 방법은 원하는 작업(출력)을 하는 함수를 만들고 K Combinator로 감싼 다음 원래의 채인에 추가하는 것입니다. 

```ts
function process(data: Data): Processed {
  return data
    |> func1
    |> func2
    |> (v) => k(v, console.log(v))
    |> func3
    |> func4;
}
```

`(v) => k(v, console.log(v))` 부분을 보면 K Combinator의 정의에 따라 `v`를 반환하는 함수임을 알 수 있습니다. K Combinator의 두 번째 인자인 `console.log(v)`는 실행이 되지만 그 결과가 무시되고, 그 결과 우리는 `v`를 반환하면서 `v`의 값을 출력하는 작업을 수행할 수 있습니다.

## 마무리

이 글에서는 SKI Combinator들에 대해 알바보았고, 다음 글에서는 이 SKI Combinator들을 이용해 다른 Combinator들을 유도해보겠습니다.

## 더 알아보려면?

- [combinatorylogic.com](https://combinatorylogic.com/)
- [Combinatory logic 위키피디아](https://en.wikipedia.org/wiki/Combinatory_logic)
