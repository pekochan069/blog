---
title: nobpp
description: NoBuild C++
category: c++
tags: ["프로그래밍", "c++"]
published: 2025-01-28T17:55:12.088Z
draft: false
---

## NoBuild

### NoBuild는 무엇인가?

`NoBuild`는 프로그래밍 트위치 스트리머 및 유튜버인 [tsoding](https://twitch.tv/tsoding)의 프로젝트 빌드에 관한 아이디어이다. tsoding은 cmake, bazel 등의 빌드 시스템들은 너무 무겁고 복잡하다고 생각하며, make와 같은 더 간단한 빌드 스크립트를 자주 사용한다. 그런데 make의 문제점은 posix 플랫폼에 종속적인 빌드 툴이고, 프로젝트를 빌드하는데 c 컴파일러가 아닌 추가적인 의존성이 발생한다는 것이다. NoBuild는 이러한 문제점 속에서 어떠한 외부의 의존성 없이 c 컴파일러만을 이용해 프로젝트를 빌드할 수 있도록 하는 것이 목표인 프로젝트이다.

### NoBuild 구현 - nob

tsoding은 방송에서 NoBuild의 구현체인 nob을 만들고 공개했다. nob은 [nob.h](https://github.com/tsoding/nob.h) 리포지토리에서 확인할 수 있다.

nob은 간단한 구조를 가지고 있다. 우선 nob을 사용하기 위해 `nob.h`를 프로젝트에 포함시킨 후, c로 빌드 스크립트를 작성하면 된다. 다음은 nob을 사용한 간단한 예제 빌드 스크립트이다.

```c
// nob.c
#define NOB_IMPLEMENTATION
#include "nob.h"

int main(int argc, char **argv)
{
    NOB_GO_REBUILD_URSELF(argc, argv);
    Nob_Cmd cmd = {0};
    nob_cmd_append(&cmd, "cc", "-Wall", "-Wextra", "-o", "main", "main.c");
    if (!nob_cmd_run_sync(cmd)) return 1;
    return 0;
}
```

## nobpp

### nobpp를 만들게 된 계기

사실 nobpp는 만들지 않아도 되는 프로젝트였다. 이미 nob만으로 c++ 프로젝트를 빌드할 수 있고, 크로스 플랫폼 지원도 존재한다. 근데 그냥 다른 사람이 만든 프로젝트를 가져다 쓰기만 하는 것은 재미가 좀 없다. 그래서 한 번 c++ 프로젝트들에 사용할 NoBuild 구현체를 만들어보기로 했다.

### nobpp 프로젝트

프로젝트는 [nobpp](https://github.com/pekochan069/nobpp)에서 확인할 수 있다. 기본 아이디어는 같다. `nobpp.hpp` 헤더파일을 프로젝트에 포함시킨 후, c++로 빌드 스크립트를 작성하면 된다. 당연하지만 tsoding의 nob은 다양한 사람들이 기여를 하고 있고, tsoding또한 나보다 훨씬 더 프로그래밍을 잘 하기 때문에 nobpp는 nob처럼 잘 짜여져 있지는 않고, 오로지 내가 사용하고 공부하기 위해 만들었다.

### nobpp 사용법

nobpp를 사용하기 위해서는 일단 `nobpp.hpp` 파일을 프로젝트에 포함시켜야 한다. 가장 간단한 방법은 `wget`이나 `curl`을 사용하는 것이다.

```sh
wget https://raw.githubusercontent.com/pekochan069/nobpp/refs/heads/main/nobpp.hpp # wget 사용
curl -o nobpp.hpp https://raw.githubusercontent.com/pekochan069/nobpp/refs/heads/main/nobpp.hpp # curl 사용
```

`nobpp.hpp` 파일을 프로젝트에 포함시켰다면, 이제 c++로 빌드 스크립트를 작성하면 된다. 다음은 예제 빌드 스크립트이다.

```cpp
// build.cpp
#include "nobpp.hpp"

int main()
{
    nobpp::CommandBuilder builder = nobpp::CommandBuilder();

    builder.set_language(nobpp::Language::cpp)
        .set_target_os(nobpp::TargetOS::windows)
        .set_optimization_level(nobpp::OptimizationLevel::o3)
        .add_options({"-ffast-math"})
        .add_file("./test.cpp")
        .add_build_dir("./bin")
        .set_output("test")
        .run();
}
```

빌드 스크립트를 작성했다면 c++ 컴파일러로 빌드 스크립트를 컴파일하면 된다. 나는 윈도우에서 주로 개발을 하고 wsl도 자주 사용하기 때문에 clang을 사용했다. nobpp는 c++14 이상을 지원하는 컴파일러를 필요로 하므로 대부분의 현세대 c++ 컴파일러는 사용할 수 있을 것이다. gcc를 이용하는 것도 추가해두긴 했지만 테스트는 해보지 않았고, 아직 리눅스 지원을 하지 않기 떄문에 clang만 사실상 지원한다고 보면 된다.

```sh
clang++ -std=c++14 -O3 build.cpp -o build.exe # 윈도우
```

빌드 스크립트를 컴파일했으면 빌드용 바이너리를 실행하면 프로젝트가 컴파일된다.

```sh
./build.exe
```

위의 빌드 스크립트를 이용해 프로젝트가 컴파일하면 다음과 같은 파일 구조가 생성될 것이다.

{% FileTree %}
- bin
  - test.exe
- build.cpp
- build.exe
- nobpp.hpp
- test.cpp
{% /FileTree %}
